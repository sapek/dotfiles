let SessionLoad = 1
if &cp | set nocp | endif
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd E:\BrainSlice\src\Sw
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +44 BrainSliceCore\BrainSliceCore.h
badd +308 BrainSliceCore\BrainSliceCoreImpl.cpp
badd +1 BrainSliceCommon\BrainSliceCommon.h
badd +264 BrainSliceCommon\BrainSliceCommonImpl.cpp
badd +12 \SoftwareBrainSlice\src\BrainSliceIOLib\BrainSliceIO.h
badd +1 \SoftwareBrainSlice\src\BrainSliceIOLib\BrainSliceIOLib.h
badd +379 \SoftwareBrainSlice\src\BrainSliceIOLib\BrainSliceIOLib.cpp
badd +57 BrainSliceEmulatorLib\BrainSliceEmulator.h
badd +87 BrainSliceEmulatorLib\BrainSliceEmulatorImpl.cpp
badd +136 BrainSliceCommon\BrainSliceCommon.vcxproj
badd +173 BrainSliceTuring\BrainSliceTuringImpl.cpp
badd +138 BrainSliceTuring\BrainSliceTuring.vcxproj
badd +131 BrainSliceLoader\BrainSliceLoader.vcxproj
badd +31 BrainSliceCore\StructLayout.h
badd +29 BrainSliceCore\BrainSliceCore.vcxproj
badd +324 TestClient\main.cpp
badd +392 BrainSliceCommon\BrainSliceCommonTests.cpp
badd +28 BrainSliceLoader\main.cpp
badd +129 BrainSliceEmulatorLib\BrainSliceEmulatorLib.vcxproj
badd +15 BrainSliceCore\FixedBuffer.h
badd +108 BrainSliceCore\FirmwareRequest.h
argglobal
silent! argdel *
set lines=63 columns=258
winpos 434 252
edit BrainSliceCore\FirmwareRequest.h
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=20
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 108 - ((51 * winheight(0) + 30) / 60)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
108
normal! 083|
lcd E:\BrainSlice\src\Sw
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
